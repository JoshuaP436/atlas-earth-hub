// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  strategies    Strategy[]
  userProfiles  UserProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id          String @id @default(cuid())
  userId      String @unique
  currentAB   Int    @default(0)
  totalLands  Int    @default(0)
  currentBadgeTier Int @default(0)
  mayor       Boolean @default(false)
  
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  lands       Land[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Land {
  id          String      @id @default(cuid())
  portfolioId String
  rarity      LandRarity
  quantity    Int         @default(1)
  purchasePrice Int?
  notes       String?
  createdAt   DateTime    @default(now())
  
  portfolio   Portfolio   @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Strategy {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  targetAB    Int
  currentBadgeTier Int
  boostLevel  Int      @default(1)
  landMix     Json     // Store land distribution as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LandRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}
